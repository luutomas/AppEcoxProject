install.packages(c("aTSA", "fGarch", "MLmetrics", "repr", "rugarch"))
library(quantmod)
library(fGarch)
library(repr)
library(forecast)
library(aTSA)
library(rugarch)
library(tseries)
library(MLmetrics)
getSymbols('BABA', src = 'yahoo', return.class = 'xts',from = "2014-09-20",to="2019-12-31")
head(BABA)
BABA <- BABA[,"BABA.Close"]
plot.xts(BABA, ylab = NA)
BABA_logret <- na.omit(diff(log(BABA)))
plot.xts(BABA_logret, ylab = NA)
hist(BABA_logret,freq=FALSE,breaks=100)
curve(dnorm(x, mean=mean(BABA_logret), sd=sd(BABA_logret)), add=TRUE, col="red")
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
}
adf
adf <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
}
adf
par(mfrow = c(1,1))
LB <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
LB[i,"p.val"] =Box.test(BABA_logret, type = "Ljung-Box", lag = i)$p.val
}
LB
arima101 <- arima(BABA_logret, order = c(1, 0, 1))
arima101
arch.test(arima101)
install.packages(c("aTSA", "fGarch", "forecast", "MLmetrics", "quantmod", "repr", "rugarch", "tseries"))
##### Getting the stock data for the chosen stock ####
getSymbols('BABA', src = 'yahoo', return.class = 'xts',from = "2014-09-20",to="2019-12-31")
##### Getting the stock data for the chosen stock ####
getSymbols('BABA', src = 'yahoo', return.class = 'xts',from = "2014-09-20",to="2019-12-31")
library(quantmod)
library(fGarch)
library(repr)
library(forecast)
library(aTSA)
library(rugarch)
library(tseries)
library(MLmetrics)
##### Getting the stock data for the chosen stock ####
getSymbols('BABA', src = 'yahoo', return.class = 'xts',from = "2014-09-20",to="2019-12-31")
head(BABA)
BABA <- BABA[,"BABA.Close"]
plot.xts(BABA, ylab = NA)
BABA_logret <- na.omit(diff(log(BABA)))
plot.xts(BABA_logret, ylab = NA)
hist(BABA_logret,freq=FALSE,breaks=100)
curve(dnorm(x, mean=mean(BABA_logret), sd=sd(BABA_logret)), add=TRUE, col="red")
plot.xts(BABA, ylab = NA)
plot.xts(BABA_logret, ylab = NA)
plot.xts(BABA_logret, ylab = NA)
hist(BABA_logret,freq=FALSE,breaks=100)
curve(dnorm(x, mean=mean(BABA_logret), sd=sd(BABA_logret)), add=TRUE, col="red")
adf <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
}
adf
par(mfrow = c(2, 1))
acf(BABA_logret)
pacf(BABA_logret)
par(mfrow = c(1,1))
# testing joint significance of lags
LB <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
LB[i,"p.val"] =Box.test(BABA_logret, type = "Ljung-Box", lag = i)$p.val
}
LB
custom_ARIMA <- function(dat,max_p,max_q, d, const){
model_config <-c()
model_AIC <-c()
model_BIC <-c()
Ljung_Box_pval <-c()
RMSE <- c()
for (i in 1:(max_p+1)){
for (j in 1:(max_q+1)){
arima<- tryCatch(Arima(dat,  # variable
order = c(i-1,d,j-1),  # (p,d,q) parameters
include.constant = const),
warning = function(w) {print(paste("non-finite finite-difference value", ''));
NaN},
error = function(e) {print(paste("non-finite finite-difference value", ''));
NaN})
if (!is.numeric(arima)){
model_config <-c(model_config,
paste(i-1,d,j-1,sep=',')
)
model_AIC <- c(model_AIC, (AIC(arima)))
model_BIC <- c(model_BIC, (BIC(arima)))
Ljung_Box_pval <-c(Ljung_Box_pval,(as.numeric(sub(".*p-value = ","",
capture.output(checkresiduals(arima, plot=FALSE)[5]))[5])))
RMSE_tmp <-round(sqrt(mean((as.vector(arima$fitted) - as.vector(dat))^2)),1)
RMSE <- c(RMSE, RMSE_tmp)
}
}
}
df <- as.data.frame(cbind(model_config,
model_AIC,
as.numeric(as.character(model_BIC)),
as.numeric(as.character(Ljung_Box_pval)),
RMSE))
names(df) <- c('model_config','model_AIC','model_BIC','Ljung_Box_pval','RMSE')
df$model_config <- as.character(df$model_config)
df$model_AIC <- as.numeric(as.character(df$model_AIC))
df$model_BIC <- as.numeric(as.character(df$model_BIC))
df$Ljung_Box_pval <- as.numeric(as.character(df$Ljung_Box_pval))
return(df)
}
custom_ARIMA_results <- custom_ARIMA(BABA_logret, 10, 10, 0, FALSE)
head(custom_ARIMA_results[order(custom_ARIMA_results$model_AIC),],5)
head(custom_ARIMA_results[order(custom_ARIMA_results$model_BIC),],5)
auto.arima(BABA_logret,ic ="aic") # We also used out-of-the-box function, which finds the best order by minimizing information criterion
auto.arima(BABA_logret,ic ="aic", stepwise = FALSE) # We also used out-of-the-box function, which finds the best order by minimizing information criterion
#### Conditional Volatility ####
# We start with ARMA(2,0,2) - GARCH(1,1)
# Save last 183 observations (6 months) for out of sample forecasting
arma202_garch11_spec = ugarchspec(mean.model = list(armaOrder=c(2, 2)),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1))
)
arma202_garch11= ugarchfit(arma202_garch11_spec, BABA_logret, out.sample = 183)
arma202_garch11
# Testing normality
jarque.bera.test(residuals(arma202_garch11))
par(mfrow = c(1, 2))
hist(residuals(arma202_garch11), breaks = 30, main ='Histogram', cex.main = 0.8, cex.lab = 0.8, xlab = NA,
cex.axis = 0.8)
box()
qqnorm(residuals(arma202_garch11), cex.main = 0.8, cex.lab = 0.8, cex.axis = 0.8)
qqline(residuals(arma202_garch11), lwd = 2)
arma202_garch11_t_spec = ugarchspec(mean.model = list(armaOrder=c(2, 2)),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = 'std')
arma202_garch11_t= ugarchfit(arma202_garch11_t_spec, BABA_logret, out.sample = 183)
arma202_garch11_t
jarque.bera.test(residuals(arma202_garch11_t))
par(mfrow = c(1, 2))
hist(residuals(arma202_garch11_t), breaks = 30, main ='Histogram', cex.main = 0.8, cex.lab = 0.8, xlab = NA,
cex.axis = 0.8)
box()
qqnorm(residuals(arma202_garch11_t), cex.main = 0.8, cex.lab = 0.8, cex.axis = 0.8)
qqline(residuals(arma202_garch11_t), lwd = 2)
# Lets try to fit models from GARCH family that account for asymmetric responses, namely EGARCH and GJRGARCH
# ARMA(2,0,2)  EGARCH(1,1)
arma202_egarch11_spec <- ugarchspec(mean.model = list(armaOrder = c(2, 2)),
variance.model = list(model = "eGARCH",
garchOrder = c(1, 1))
)
arma202_egarch11 = ugarchfit(arma202_egarch11_spec, BABA_logret, out.sample = 183)
arma202_egarch11
