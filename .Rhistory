best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
}
}
return(c(best.p, best.q))
}
print(bestGARCHcombined(BABA_logret))
bestGARCHcombined <- function(ts_data) {
ap.max <- 5
aq.max <- 5
gp.max <- 5
gq.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
for (i1 in 1:ap.max) {
for (i2 in 1:aq.max) {
for (i3 in 1:gp.max) {
for (i4 in 1:gq.max) {
ourSpec <-
ugarchspec(
mean.model = list(
armaOrder = c(i1, i2),
include.mean = FALSE
),
variance.model = list(garchOrder = c(i3, i4))
)
fit <-
tryCatch(ugarchfit(spec = ourSpec, data = resid(arima(ts_data, order = c(i1, 0, i2)))),
warning = function(w) {print(paste("non-finite finite-difference value", ''));NaN},
error = function(e) {print(paste("non-finite finite-difference value", ''))}
)
inf.crit <- try(infocriteria(fit)[1])
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
}
}
return(c(best.p, best.q))
}
print(bestGARCHcombined(BABA_logret))
head(BABA)
BABA <- BABA[,"BABA.Close"]
plot.xts(BABA, ylab = NA) #clearly non-stationary
BABA_logret <- na.omit(diff(log(BABA)))
plot.xts(BABA_logret, ylab = NA)
hist(BABA_logret,freq=FALSE,breaks=100)
curve(dnorm(x, mean=mean(BABA_logret), sd=sd(BABA_logret)), add=TRUE, col="red") #seems stationary
BABA_logret <- na.omit(diff(log(BABA)))
plot.xts(BABA_logret, ylab = NA)
hist(BABA_logret,freq=FALSE,breaks=100)
curve(dnorm(x, mean=mean(BABA_logret), sd=sd(BABA_logret)), add=TRUE, col="red") #seems stationary
adf.test(BABA_logret)
Box.test(BABA_logret, type = "Ljung-Box")
kpss.test(BABA_logret, null = "Trend")
adf.test(BABA_logret)
adf.test(BABA_logret)
adf.test(BABA_logret)
Box.test(BABA_logret, type = "Ljung-Box")
adf.test(BABA_logret)
adf.test(BABA_logret)
Box.test(BABA_logret, type = "Ljung-Box")
kpss.test(BABA_logret, null = "Trend")
kpss.test(BABA_logret)
kpss.test(BABA_logret)
stargazer(kpss.test(BABA_logret))
library(stargazer)
stargazer(kpss.test(BABA_logret))
kpss.test(BABA_logret)
adf.test(BABA_logret)
type(kpss.test(BABA_logret))
typeof(kpss.test(BABA_logret))
str(kpss.test(BABA_logret))
stargazer(kpss.test(BABA_logret)$statistic)
str(adf.test(BABA_logret))
str(kpss.test(BABA_logret))
adf.test(BABA_logret)
Box.test(BABA_logret, type = "Ljung-Box")
kpss.test(BABA_logret)
adf <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
}
adf #all lags below confidence level, seems stationary
# testing joint significance of lags
LB <- data.frame("lags"=1:10,"p-val"=NA)
for (i in 1:10){
LB[i,"p.val"] = Box.test(BABA_logret, type = "Ljung-Box", lag = i)$p.val
}
LB
randomNormTS <- rnorm(100)
Box.test(randomNormTS, type = "Ljung")
for (i in 1:10){
LB[i,"p.val"] = Box.test(randomNormTS, type = "Ljung-Box", lag = i)$p.val
}
LB
for (i in 1:10){
LB[i,"p.val"] = adf.test(randomNormTS, type = "Ljung-Box", lag = i)$p.val
}
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(randomNormTS, k = i)$p.val)
}
adf #all lags below confidence level, seems stationary
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
for (i in 1:10){
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
}
adf #all lags below confidence level, seems stationary
adf[i,"p.val"] =as.numeric(adf.test(rnomr(100), k = i)$p.val)
adf[i,"p.val"] =as.numeric(adf.test(rnorm(300), k = i)$p.val)
adf #all lags below confidence level, seems stationary
adf[i,"p.val"] =as.numeric(adf.test(BABA_logret, k = i)$p.val)
bestARIMA_results <- bestARIMA(BABA_logret, 10, 10, 0, FALSE)
bestARIMA <- function(dat,max_p,max_q, d, const){
model_config <-c()
model_AIC <-c()
model_BIC <-c()
Ljung_Box_pval <-c()
RMSE <- c()
for (i in 1:(max_p+1)){
for (j in 1:(max_q+1)){
arima<- tryCatch(Arima(dat,  # variable
order = c(i-1,d,j-1),  # (p,d,q) parameters
include.constant = const),
warning = function(w) {print(paste("non-finite finite-difference value", ''));
NaN},
error = function(e) {print(paste("non-finite finite-difference value", ''));
NaN})
if (!is.numeric(arima)){
model_config <-c(model_config,
paste(i-1,d,j-1,sep=',')
)
model_AIC <- c(model_AIC, (AIC(arima)))
model_BIC <- c(model_BIC, (BIC(arima)))
Ljung_Box_pval <-c(Ljung_Box_pval,(as.numeric(sub(".*p-value = ","",
capture.output(checkresiduals(arima, plot=FALSE)[5]))[5])))
RMSE_tmp <-round(sqrt(mean((as.vector(arima$fitted) - as.vector(dat))^2)),1)
RMSE <- c(RMSE, RMSE_tmp)
}
}
}
df <- as.data.frame(cbind(model_config,
model_AIC,
as.numeric(as.character(model_BIC)),
as.numeric(as.character(Ljung_Box_pval)),
RMSE))
names(df) <- c('model_config','model_AIC','model_BIC','Ljung_Box_pval','RMSE')
df$model_config <- as.character(df$model_config)
df$model_AIC <- as.numeric(as.character(df$model_AIC))
df$model_BIC <- as.numeric(as.character(df$model_BIC))
df$Ljung_Box_pval <- as.numeric(as.character(df$Ljung_Box_pval))
return(df)
}
bestARIMA_results <- bestARIMA(BABA_logret, 10, 10, 0, FALSE)
head(bestARIMA_results[order(bestARIMA_results$model_AIC),],5)
head(bestARIMA_results[order(bestARIMA_results$model_BIC),],5)
auto.arima(BABA_logret,ic ="aic", stepwise = FALSE)
auto.arima(BABA_logret,ic ="bic", stepwise = FALSE)
arima202 <- arima(BABA_logret, order = c(2,0,2))
checkresiduals(arima202)
arch.test(arima203)
arima203 <- arima(BABA_logret, order = c(2,0,3))
checkresiduals(arima203)
arch.test(arima203)
bestGARCH <- function(arima_model) {
p.max <- 5
q.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model))
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH(arima202))
resid(arima202)
print(bestGARCH(arima202))
arma202_garch11 = ugarchfit(spec = arma202_garch11_spec, data = BABA_logret, out.sample = 183, solver = "hybrid")
#### Conditional Volatility ####
# We start with ARMA(2,0,2) - GARCH(1,1)
# Save last 183 observations (6 months) for out of sample forecasting
arma202_garch11_spec = ugarchspec(mean.model = list(armaOrder=c(2, 2)),
variance.model = list(garchOrder = c(1, 1))
)
bestGARCH <- function(arima_model) {
p.max <- 5
q.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model))
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH(arima202))
for (i in 1:10){
LB[i,"p.val"] = Box.test(BABA_logret, type = "Ljung-Box", lag = i)$p.val
}
LB
for (i in 1:10){
LB[i,"p.val"] = Box.test(rnorm(300), type = "Ljung-Box", lag = i)$p.val
}
LB
bestGARCH <- function(arima_model) {
p.max <- 5
q.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model), solver = "hybrid")
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH(arima202))
bestGARCHcombined <- function(ts_data) {
ap.max <- 5
aq.max <- 5
gp.max <- 5
gq.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
for (i1 in 1:ap.max) {
for (i2 in 1:aq.max) {
for (i3 in 1:gp.max) {
for (i4 in 1:gq.max) {
ourSpec <-
ugarchspec(
mean.model = list(
armaOrder = c(i1, i2),
include.mean = FALSE
),
variance.model = list(garchOrder = c(i3, i4))
)
fit <-
tryCatch(ugarchfit(spec = ourSpec, data = resid(arima(ts_data, order = c(i1, 0, i2))), solver = "hybrid"),
warning = function(w) {print(paste("non-finite finite-difference value", ''));NaN},
error = function(e) {print(paste("non-finite finite-difference value", ''))}
)
inf.crit <- ifelse(infocriteria(fit)[1])
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
}
}
return(c(best.p, best.q))
}
print(bestGARCHcombined(BABA_logret))
bestGARCHcombined <- function(ts_data) {
ap.max <- 5
aq.max <- 5
gp.max <- 5
gq.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
for (i1 in 1:ap.max) {
for (i2 in 1:aq.max) {
for (i3 in 1:gp.max) {
for (i4 in 1:gq.max) {
ourSpec <-
ugarchspec(
mean.model = list(
armaOrder = c(i1, i2),
include.mean = FALSE
),
variance.model = list(garchOrder = c(i3, i4))
)
fit <-
tryCatch(ugarchfit(spec = ourSpec, data = resid(arima(ts_data, order = c(i1, 0, i2))), solver = "hybrid"),
warning = function(w) {print(paste("non-finite finite-difference value", ''));NaN},
error = function(e) {print(paste("non-finite finite-difference value", ''))}
)
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
}
}
return(c(best.p, best.q))
}
print(bestGARCHcombined(BABA_logret))
bestGARCHcombined <- function(ts_data) {
ap.max <- 5
aq.max <- 5
gp.max <- 5
gq.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
for (i1 in 1:ap.max) {
for (i2 in 1:aq.max) {
for (i3 in 1:gp.max) {
for (i4 in 1:gq.max) {
ourSpec <-
ugarchspec(
mean.model = list(
armaOrder = c(i1, i2),
include.mean = FALSE
),
variance.model = list(garchOrder = c(i3, i4))
)
fit <-ugarchfit(spec = ourSpec, data = resid(arima(ts_data, order = c(i1, 0, i2))), solver = "hybrid")
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
}
}
return(c(best.p, best.q))
}
print(bestGARCHcombined(BABA_logret))
arima202 <- arima(BABA_logret, order = c(2,0,2))
arima202 <- arima(BABA_logret, order = c(2,0,2))
checkresiduals(arima202)
arch.test(arima203)
arima203 <- arima(BABA_logret, order = c(2,0,3))
checkresiduals(arima203)
arch.test(arima203)
arma202_garch11 = ugarchfit(
spec = arma202_garch11_spec,
data = residuals(arima(BABA_logret, order = c(2, 2))),
out.sample = 183,
solver = "hybrid"
)
bestGARCH <- function(arima_model) {
p.max <- 5
q.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model), solver = "hybrid")
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH(arima202))
print(bestGARCH(arima203))
arma202_garch11 = ugarchfit(
spec = arma202_garch11_spec,
data = residuals(arima202),
out.sample = 183,
solver = "hybrid"
)
arma202_garch11_res = ugarchfit(spec = arma202_garch11_spec, data = resid(arima202), out.sample = 183)
arma202_garch11 = ugarchfit(
spec = arma202_garch11_spec,
data = residuals(arima202),
out.sample = 183,
solver = "hybrid"
)
print(arma202_garch11)
infocriteria(arma202_garch11)
str(infocriteria(arma202_garch11))
infocriteria(arma202_garch11[[2]]
infocriteria(arma202_garch11[[2]])
infocriteria(arma202_garch11[2])
infocriteria(arma202_garch11)[2]
bestGARCH_AIC <- function(arima_model) {
p.max <- 5
q.max <- 5
aic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model), solver = "hybrid")
inf.crit <- infocriteria(fit)[1]
aic.min <- ifelse(inf.crit < aic.min, inf.crit, aic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
bestGARCH_BIC <- function(arima_model) {
p.max <- 5
q.max <- 5
bic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model), solver = "hybrid")
inf.crit <- infocriteria(fit)[2]
bic.min <- ifelse(inf.crit < bic.min, inf.crit, bic.min)
best.p <- ifelse(inf.crit == aic.min, i1, best.p)
best.q <- ifelse(inf.crit == aic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH_BIC(arima203))
bestGARCH_BIC <- function(arima_model) {
p.max <- 5
q.max <- 5
bic.min <- Inf
best.p <- 0
best.q <- 0
inf.crit <- 0
for (i1 in 1:p.max) {
for (i2 in 1:q.max) {
ourSpec <-
ugarchspec(
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(garchOrder = c(i1, i2))
)
fit <- ugarchfit(spec = ourSpec, data = resid(arima_model), solver = "hybrid")
inf.crit <- infocriteria(fit)[2]
bic.min <- ifelse(inf.crit < bic.min, inf.crit, bic.min)
best.p <- ifelse(inf.crit == bic.min, i1, best.p)
best.q <- ifelse(inf.crit == bic.min, i2, best.q)
}
}
return(c(best.p, best.q))
}
print(bestGARCH_BIC(arima203))
print(bestGARCH_BIC(arima202))
print(bestGARCH_AIC(arima203))
print(bestGARCH_AIC(arima202))
arma202_garch11 <- ugarchfit(spec = arma202_garch11_spec, data = residuals(arima202),
out.sample = 183,solver = "hybrid")
print(arma202_garch11)
plot(resid(arma202_garch11))
resid(arma202_garch11)
residuals(arma202_garch11)
plot(residuals(arma202_garch11))
arma202_garch11_res <- residuals(arma202_garch11)
plot(arma202_garch11_res)
Box.test(arma202_garch11_res)
hist(arma202_garch11_res)
hist(arma202_garch11_res, break = 1)
hist(arma202_garch11_res)
checkresiduals(arma202_garch11)
checkresiduals(residuals(arma202_garch11))
checkresiduals(arma202_garch11)
acf(arma202_garch11_res)
pacf(arma202_garch11_res)
acf(arma202_garch11_res)
checkresiduals(arima202)
